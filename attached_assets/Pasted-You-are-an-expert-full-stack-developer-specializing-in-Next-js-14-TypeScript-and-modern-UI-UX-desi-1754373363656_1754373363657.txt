You are an expert full-stack developer specializing in Next.js 14, TypeScript, and modern UI/UX design. Your task is to build a complete, production-quality analytics dashboard named "ADmyBRAND Insights" from scratch. You will follow my instructions meticulously, making logical decisions for implementation details based on best practices.

Project Goal: Create a visually stunning, responsive, and interactive analytics dashboard with a consistent design system, multiple chart types, a feature-rich data table, and advanced functionalities like dark mode and loading skeletons.

Phase 1: Project Setup & Configuration
Initialize the Project: Use the standard command to create a new Next.js 14 application named admybrand-insights. Ensure it is configured with TypeScript, Tailwind CSS, and ESLint, using the App Router.

Integrate a UI Framework: Initialize shadcn/ui in the project. When prompted, configure it to use the Slate color palette and CSS variables. This is a critical step for our design system.

Install Core Dependencies: Install all necessary libraries for our project's features. This includes a charting library (I recommend recharts), a table management library (use @tanstack/react-table for its power and flexibility), a library for theming (use next-themes), and a library for date management (like date-fns).

Scaffold shadcn/ui Components: Use the shadcn/ui CLI to add the essential building blocks we will need later. Include card, button, table, input, skeleton, dropdown-menu, toggle-group, and the components required for a date-picker.

Establish Project Structure: To maintain a clean and scalable architecture, create the following directories:

app/components/: For custom, reusable page components.

app/components/charts/: A dedicated home for our chart components.

app/lib/: For utility functions and, most importantly, our TypeScript type definitions.

app/data/: For our mock data files.

Phase 2: Design System & Mock Data
Define the Visual Language: Go to app/globals.css. Your task is to define a modern and clean design system by configuring the CSS variables for both light (:root) and dark (.dark) modes.

Light Mode: Use a clean white or very light grey background. Text should be nearly black. Cards should be white with a subtle border.

Dark Mode: Use a deep, desaturated blue or slate for the background. Text should be a soft white. Cards should be a slightly lighter shade of the dark background to create a low-contrast, premium feel.

Ensure all shadcn/ui variables are correctly mapped for both themes.

Define Data Contracts: In the app/lib/ directory, create a types.ts file. Define the TypeScript interfaces for all the data structures our dashboard will handle. Create interfaces for Campaign, RevenueData, UserGrowthData, and ConversionSourceData. Be specific about the data types for each property (e.g., status in a campaign can be a union type: 'Active' | 'Paused' | 'Completed').

Generate Realistic Mock Data: In the app/data/ directory, create a mockData.ts file. Import the types you just defined and generate realistic-looking datasets.

Create an array of at least 15 mock marketing Campaign objects with varied data.

Generate RevenueData and UserGrowthData for the last 12 months to populate our charts.

Create ConversionSourceData for 4-5 common traffic sources (e.g., 'Organic Search', 'Paid Social') and assign a unique hex color code to each for the donut chart.

Phase 3: Building Reusable Components
For each component, create a new file in the app/components/ directory. Ensure they are well-structured, accept props, and use shadcn/ui components for their internal structure.

Metric Card Component: Create a MetricCard.tsx component. It should display a title, a main value, a percentage change, and an icon. The percentage change should be colored green for positive and red for negative. Add a subtle shadow and lift animation on hover for a premium feel.

Chart Components: In the app/components/charts/ directory, create three separate, responsive chart components using recharts. These must be client components ('use client').

RevenueLineChart.tsx: A line chart to visualize revenue over time.

UsersBarChart.tsx: A bar chart to show user growth per month.

ConversionsDonutChart.tsx: A donut chart (a pie chart with a hole in the middle) to display traffic sources.

For all charts, use the ResponsiveContainer to ensure they adapt to different screen sizes. Style them using the CSS variables from our design system so they automatically adapt to dark/light mode.

Campaign Data Table: Create a CampaignDataTable.tsx component. This is a complex component. Use @tanstack/react-table for the logic and the shadcn/ui Table for the visuals. It must include:

Sorting: Columns should be sortable.

Filtering: Add an Input field that filters the table by campaign name.

Pagination: Include "Next" and "Previous" buttons and a page number indicator.

Theme Toggle Button: Create a ThemeToggle.tsx component. It should use the useTheme hook from next-themes to switch between dark and light modes. Use lucide-react icons (Sun and Moon) to provide clear visual feedback.

Theme Provider: Create a ThemeProvider.tsx component that wraps the NextThemesProvider to enable theme functionality across the application.

Phase 4: Assembling the Dashboard
Update Root Layout: Modify app/layout.tsx. Wrap the main content with your ThemeProvider to make the theme state available globally.

Construct the Main Page: Now, assemble the entire dashboard in app/page.tsx.

Create a main header with the title "ADmyBRAND Insights" and place the ThemeToggle button on the right.

Use a responsive CSS grid or flexbox layout to structure the dashboard.

Top Row: Display four instances of your MetricCard component, populated with summary data.

Middle Row: Place the RevenueLineChart and ConversionsDonutChart side-by-side. They should stack vertically on smaller screens.

Bottom Section: Display the full-width CampaignDataTable.

Loading States (Crucial for UX): For every component that fetches or renders data (charts, table, cards), implement a loading state. Use the shadcn/ui Skeleton component as a placeholder. You can simulate loading with a useEffect and setTimeout.

Phase 5: Final Polish & Bonus Features
Simulate Real-time Updates: In the main page component, use a setInterval within a useEffect hook to periodically update one of the metric cards' values. This will demonstrate the dashboard's reactivity. Remember to clear the interval on component unmount.

Advanced Filtering: Add the shadcn/ui DatePicker with range selection to the top of the dashboard. While you don't need to filter the mock data, ensure that the selected date range is stored in a state variable and displayed.

Your final task is to ensure all components are correctly imported and rendered, the layout is fully responsive, and the application runs without any errors. Good luck.